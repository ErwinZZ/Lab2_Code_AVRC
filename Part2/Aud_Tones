/*
 * DistanceMeasure.c
 *
 * Created: 9/25/2019 1:33:18 AM
 * Author : 86185
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
volatile unsigned int Hi_switch = 1;
volatile unsigned long l_period = 1500;
volatile unsigned int h_period = 20;
volatile unsigned long pul_wid;
#include <stdio.h>
#include <stdlib.h>

#define F_CPU 16000000UL
#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void USART_init(void);
void USART_send( unsigned char data);
void USART_putstring(char* StringPtr);

char String[10] = "";


void USART_init(void){
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALLER>>8);
	UBRR0L = (unsigned char)BAUD_PRESCALLER;
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
}

void USART_send( unsigned char data)
{
	
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
		USART_send(*StringPtr);
	StringPtr++;}
	
}

unsigned int pulse_width(){
	TCCR1B |= 0x40;  // input capture on rising edge
	TIFR1 |= 0x20;   // clear the input capture flag
	while (!(TIFR1 & 0x20)); // wait until we get the first edge
	unsigned int temp = ICR1; // save the timestamp of the edge
	TCCR1B &= 0xBF; // capture the falling edge
	TIFR1 |= 0x20;   // clear the input capture flag
	while (!(TIFR1 & 0x20)); // wait until we get the next edge
	return ICR1 - temp;
}
int main(void)
{
	USART_init();
	DDRB |= (1 << PORTB1);
	DDRB &= ~(1 << PORTB0);
	PORTB |= (1 << PORTB1);
	TCCR1B |= (1 << CS11) | (1 << ICES1);
	TCCR1A |= (1 << COM1A0);
	TIMSK1 |= (1 << OCIE1A);
	//OCR1A = TCNT1 + h_period;
    /* Replace with your application code */
	sei();
    while (1) 
    {
		sprintf(String,"%lu \n", pul_wid); // Print to terminal (converts a number into a string)
		USART_putstring(String);
    }
}
ISR(TIMER1_COMPA_vect)
{
	if (Hi_switch)
	{
		OCR1A += h_period;
		PORTB |= (1 << PORTB1);
		Hi_switch = 0;
	}
	else{
		PORTB &= ~(1 << PORTB1);
		OCR1A += l_period;
		pul_wid = pulse_width();
		Hi_switch = 1;
	}
}
